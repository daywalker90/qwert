name: test suite
on: 
    push:
      tags:
      - 'v*'

jobs:
    build:
        name: build release binaries
        strategy:
            fail-fast: false
            matrix:
                os: ["ubuntu-latest", "macos-latest"]
        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: install rust
              id: rust
              uses: dtolnay/rust-toolchain@stable
            - name: install cross
              if: contains(matrix.os, 'ubuntu')
              run: |
                cargo install cross --git https://github.com/cross-rs/cross
            - name: build unix
              if: contains(matrix.os, 'ubuntu')
              run: |
                cross build --profile optimized --locked --target aarch64-unknown-linux-gnu
                tar -czf "qwert-${{github.ref_name}}-aarch64-linux-gnu.tar.gz" --transform 's|.*/||' "target/aarch64-unknown-linux-gnu/optimized/qwert"
                ls -alh
            - name: build macos
              id: macos_build
              if: contains(matrix.os, 'macos')
              run: |
                rustup target add aarch64-apple-darwin
                export CROSSBUILD_MACOS_SDK="macosx13.1"
                export SDKROOT=$(xcrun -sdk $CROSSBUILD_MACOS_SDK --show-sdk-path)
                export MACOSX_DEPLOYMENT_TARGET=12.0
                cargo build --profile optimized --locked --target=x86_64-apple-darwin
                cargo build --profile optimized --locked --target=aarch64-apple-darwin
                lipo -create -output target/qwert-${{github.ref_name}}-universal-apple-darwin target/aarch64-apple-darwin/optimized/qwert target/x86_64-apple-darwin/optimized/qwert
                ditto -c -k --sequesterRsrc target/qwert-${{github.ref_name}}-universal-apple-darwin qwert-${{github.ref_name}}-universal-apple-darwin.zip
                otool -l target/aarch64-apple-darwin/optimized/qwert | grep -A 5 LC_BUILD_VERSION
                otool -l target/x86_64-apple-darwin/optimized/qwert | grep -A 5 LC_BUILD_VERSION
                echo "macos_version=$MACOSX_DEPLOYMENT_TARGET" >> "$GITHUB_OUTPUT"
                echo $(xcodebuild -showsdks)
                ls -alh
            - name: Upload unix Artifacts
              uses: actions/upload-artifact@v4
              if: contains(matrix.os, 'ubuntu')
              with:
                name: unix-binaries
                path: |
                    qwert-${{github.ref_name}}-aarch64-linux-gnu.tar.gz
            - name: Upload macos Artifacts
              uses: actions/upload-artifact@v4
              if: contains(matrix.os, 'macos')
              with:
                name: macos-binaries
                path: |
                    qwert-${{github.ref_name}}-universal-apple-darwin.zip
            - name: Get used versions
              run: |
                echo "rust_version=$(rustc --version | awk '{print $2}')" >> "$GITHUB_OUTPUT"
                echo "glibc_version=$(ldd --version | awk '/ldd/ {print $NF}')" >> "$GITHUB_OUTPUT"
                echo "macos_version=$CROSSBUILD_MACOS_SDK" >> "$GITHUB_OUTPUT"
        outputs:
            rust-version: ${{ steps.macos_build.outputs.rust_version }}
            glibc-version: ${{ steps.macos_build.outputs.glibc_version }}
            macos-version: ${{ steps.macos_build.outputs.macos_version }}
            
    release:
        name: Github Release
        needs: [build]
        runs-on: "ubuntu-latest"
        permissions:
            contents: write
        steps:
            - name: Get version from tag
              id: tag_name
              run: echo "current_version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Get Changelog Entry
              id: changelog_reader
              uses: mindsers/changelog-reader-action@v2
              with:
                validation_level: warn
                version: ${{ steps.tag_name.outputs.current_version }}
                path: ./CHANGELOG.md
            - name: Download Artifacts
              uses: actions/download-artifact@v4
              with:
                merge-multiple: true
            - name: Release
              uses: ncipollo/release-action@v1
              with:
                allowUpdates: false
                artifactErrorsFailBuild: true
                body: "${{ steps.changelog_reader.outputs.changes }} \n\n ###Release binaries info\n\n- Release binaries were built using rust ${{ needs.build.outputs.rust-version }}.\n- Linux release binaries require glibc>= ${{ needs.build.outputs.glibc-version }}.\n- MacOS release binaries need MacOS>=${{ needs.build.outputs.macos-version }}"
                artifacts: "qwert-${{github.ref_name}}-*.tar.gz,qwert-${{github.ref_name}}-*.zip"